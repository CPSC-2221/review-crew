package views

import "server-api/db"
import "github.com/gin-gonic/gin"
import "log"
import "strconv"

func getRestaurantReviews(locationID int32) []db.Review {
	reviews, err := db.GetRestaurantReviews(&gin.Context{}, locationID)
	if err != nil {
		log.Printf("Error while retrieving restaurant reviews: %s", err.Error())
	}
	return reviews
}

func getSubReviews(reviewID int32) (reviews []db.Review) {
	ctx := &gin.Context{}
	replies, err := db.GetRepliesToAReview(ctx, reviewID)
	if err != nil {
		log.Printf("Error while retrieving restaurant reviews: %s", err.Error())
	}
	reviews = make([]db.Review, len(replies))
	for _, r := range replies {
		review, _ := db.GetReview(r.RepliesToReviewID, ctx)
		reviews = append(reviews, *review)
	}
	return
}

func getUsername(email string) string {
	usr, _ := db.GetUser(email, &gin.Context{})
	return usr.Username
}

templ Location(location *db.Restaurant, account *db.User) {
	<div class="text-8xl text-primary font-semibold mb-2 font-display self-start">{ location.Name }</div>
	<div class="self-start border-tertiary border-2 text-tertiary font-bold p-1 rounded-lg mb-6">{ location.Location }</div>
	<div class="self-start text-lg min-h-[30vh] text-secondary">{ location.Description }</div>
	<div class="gap-5 self-start w-full flex flex-col">
		if account != nil {
			@reviewTextBox(location, account)
		}
		for _, r := range getRestaurantReviews(location.ID) {
			@review(r, account)
		}
	</div>
}

templ reviewTextBox(location *db.Restaurant, account *db.User) {
	<form>
		<textarea name="comment" maxlength="250" class="resize-y w-full h-20 border-2 border-tertiary rounded-lg p-2"></textarea>
		<input type="hidden" name="email" value={ account.Email }/>
		<input type="hidden" name="restaurantID" value={ strconv.FormatInt(int64(location.ID), 10) }/>
		<button hx-post="/createreview" type="button" class="mt-4 font-semibold border-lg rounded-lg py-1.5 bg-tertiary text-secondary hover:bg-secondary hover:text-tertiary w-full">Create Review</button>
	</form>
}

templ review(review db.Review, account *db.User) {
	<div class="w-full flex flex-col gap-1">
		<div class="p-3 border-tertiary rounded-lg border-4 w-full">
			<div class="w-full flex justify-between">
				<div>
					<span class="font-bold text-secondary">
						{ getUsername(review.Email) }
					</span>
					- 
					<span class="text-[#777777]">
						{ review.Datetime.String() }
					</span>
				</div>
				if account != nil {
					<button class="py-1 px-2 bg-tertiary font-semibold text-secondary rounded-lg hover:bg-secondary hover:text-tertiary">Reply</button>
				}
			</div>
			<div class="text-secondary">{ review.Comment }</div>
		</div>
		// for _, r := range getSubReviews(review.ID) {
		//	@reply(r)
		// }
	</div>
}

templ reply(review db.Review) {
	<div class="flex flex-row w-full">
		<div class="w-16">
			<div class="w-1/2 border-r-4 h-full border-tertiary"></div>
			<div class="w-1/2"></div>
		</div>
		<div class="flex flex-col gap-1 p-3 border-tertiary rounded-lg border-4 w-full">
			<div class="w-full">
				<span class="font-bold">
					{ getUsername(review.Email) }
				</span>
				- 
				<span class="text-[#777777]">
					{ review.Datetime.String() }
				</span>
			</div>
			<div>{ review.Comment }</div>
		</div>
	</div>
}
